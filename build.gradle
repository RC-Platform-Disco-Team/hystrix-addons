plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'jacoco'
}

group = 'com.ringcentral.platform'
version = '1.2.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile group: 'com.netflix.hystrix', name: 'hystrix-core', version: '1.5.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.8'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.5.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        Mvn(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId "$project.group"
            artifactId "$project.name"
            version "$project.version"
        }
    }
}

bintray {
    user = project.hasProperty('user') ? property('user') : 'user'
    key = project.hasProperty('key') ? property('key') : 'key'
    publications = ['Mvn']
    publish = true
    override = true
    pkg {
        repo = 'maven'
        name = "$project.group:$project.name"
        userOrg = 'ringcentral'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/ringcentral/hystrix-addons.git'
        publicDownloadNumbers = true
        githubRepo = 'ringcentral/hystrix-addons'
        githubReleaseNotesFile = 'README.md'
        websiteUrl = 'https://github.com/ringcentral/hystrix-addons'
        issueTrackerUrl = 'https://github.com/ringcentral/hystrix-addons/issues'
        version {
            name = project.version
            desc = "Hystrix-addons by Ringcentral, Inc. ${project.version}"
            vcsTag = "v${project.version}"
        }
    }
}

task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    sourceSets sourceSets.main

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}